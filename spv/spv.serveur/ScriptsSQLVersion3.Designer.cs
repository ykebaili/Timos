//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :2.0.50727.3053
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace spv.serveur {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ScriptsSQLVersion3 {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ScriptsSQLVersion3() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("spv.serveur.ScriptsSQLVersion3", typeof(ScriptsSQLVersion3).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY alarme_geree
        ///AS      
        ///    FUNCTION libelle_gravite (code gravite_t) RETURN VARCHAR2 IS
        ///    BEGIN
        ///        CASE code
        ///        WHEN c_sans THEN
        ///            RETURN &apos;Without alarm&apos;;
        ///        WHEN c_avertissement THEN
        ///            RETURN &apos;Warning&apos;;
        ///        WHEN c_indetermine THEN
        ///            RETURN &apos;Undetermined&apos;;
        ///        WHEN c_mineure THEN
        ///            RETURN &apos;Minor&apos;;
        ///	WHEN c_majeure THEN
        ///            RETURN &apos;Major&apos;;
        ///	WHEN c_critique THEN
        ///            RETURN &apos;Critical&apos;; [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string alarme_geree_corps {
            get {
                return ResourceManager.GetString("alarme_geree_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE alarme_geree
        ///AS
        ///    SUBTYPE   gravite_t IS NUMBER(1);
        ///    SUBTYPE   locale_t  IS NUMBER(1);
        ///
        ///    c_sans          CONSTANT gravite_t := 0;
        ///    c_avertissement CONSTANT gravite_t := 3;
        ///    c_indetermine   CONSTANT gravite_t := 4;
        ///    c_mineure       CONSTANT gravite_t := 5;
        ///    c_majeure       CONSTANT gravite_t := 6;
        ///    c_critique      CONSTANT gravite_t := 7;
        ///	
        ///    c_locale        CONSTANT locale_t := 1;
        ///    c_distante      CONSTANT locale_t := 0;
        ///        
        ///    FUNC [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string alarme_geree_decl {
            get {
                return ResourceManager.GetString("alarme_geree_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY diagramme
        ///AS      
        ///	--====================================================================
        ///    FUNCTION libelle (code code_oper_t) RETURN VARCHAR2 IS
        ///    BEGIN
        ///        CASE code
        ///        WHEN c_all_mandatory THEN
        ///            RETURN &apos;All mandatory&apos;;
        ///        WHEN c_automatic THEN
        ///            RETURN &apos;Automatic&apos;;
        ///        WHEN c_custom THEN
        ///            RETURN &apos;Custom&apos;;
        ///        ELSE
        ///            RETURN &apos;&apos;;
        ///        END CASE;
        ///    END libelle;
        ///    --===================== [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Diagramme_corps {
            get {
                return ResourceManager.GetString("Diagramme_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE diagramme
        ///AS
        ///    -- type pour le code des modes de calcul de l&apos;état opérationnel
        ///    SUBTYPE code_oper_t IS NUMBER(1);
        ///    
        ///    c_all_mandatory   CONSTANT code_oper_t := 0;
        ///    c_automatic       CONSTANT code_oper_t := 1;
        ///    c_custom          CONSTANT code_oper_t := 2;
        ///    c_default_value   CONSTANT code_oper_t := c_automatic;
        ///
        ///    -- type pour l&apos;état opérationnel
        ///    SUBTYPE	etat_oper_t IS NUMBER;
        ///    c_operationnel    CONSTANT etat_oper_t := 1;
        ///    c_coupe          [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Diagramme_decl {
            get {
                return ResourceManager.GetString("Diagramme_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY equipement AS
        ///
        ///    --===============================================================================
        ///    -- Retourne la gravité d&apos;alarme maximum existant sur un équipement
        ///    FUNCTION get_grave_max(p_id equip.equip_id%TYPE) RETURN NUMBER IS
        ///	
        ///        l_grave ACCES_ACCESC_REP.ALARMGEREE_GRAVE%TYPE;
        ///    BEGIN
        ///        RETURN lien_acces_alarme.get_grave_max(p_id, spv_types.c_type_equip);
        ///    END get_grave_max;
        ///    --===================================================== [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string equipement_corps {
            get {
                return ResourceManager.GetString("equipement_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE equipement AS
        ///	
        ///    FUNCTION get_grave_max(p_id equip.equip_id%TYPE) RETURN NUMBER;
        ///	
        ///    FUNCTION get_id_pere(p_id equip.equip_id%TYPE) RETURN NUMBER;
        ///	
        ///    PROCEDURE set_coeff_oper (p_equip_id EQUIP.EQUIP_ID%TYPE, 
        ///                              p_coeff diagramme.etat_oper_t,
        ///                              infos_diag_table IN OUT NOCOPY diagramme.infos_diag_t);
        ///							 
        ///							 
        ///    FUNCTION maj_oper_inclus (Id NUMBER, EquipId NUMBER, AlarmGrave NUMBER, AlarmLocal NUMBE [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string equipement_decl {
            get {
                return ResourceManager.GetString("equipement_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à DECLARE
        ///	CURSOR CProg IS
        ///		SELECT smtdiag_id, prog_id, ntwdiag_id, prog_masque
        ///			FROM network_diag, prog
        ///			WHERE smtdiag_id = ntwdiag_smt_id;
        ///			
        ///	CURSOR CurMsk (ProgId NUMBER) IS
        ///		SELECT * FROM prog_msk
        ///			WHERE prog_id = ProgId;
        ///BEGIN
        ///	FOR rCProg IN Cprog LOOP
        ///	
        ///		UPDATE network_diag SET ntwdiag_masque = rCProg.prog_masque
        ///			WHERE ntwdiag_id = rCProg.ntwdiag_id;
        ///			
        ///		FOR rCurMsk IN CurMsk (rCProg.prog_id) LOOP
        ///			INSERT INTO network_diag_masque (network_diag_masque_id, ntwdiag_id, 
        ///	 [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string InitNetworkDiagMasque {
            get {
                return ResourceManager.GetString("InitNetworkDiagMasque", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY LIAISON AS
        ///
        ///    -- TODO enter package declarations (types, exceptions, methods etc) here
        ///  
        ///    --===============================================================================
        ///    -- Retourne la gravité d&apos;alarme maximum existant sur une liaison
        ///    FUNCTION get_grave_max(p_id liai.liai_id%TYPE) RETURN NUMBER IS
        ///	
        ///        l_grave ACCES_ACCESC_REP.ALARMGEREE_GRAVE%TYPE;
        ///    BEGIN
        ///        RETURN lien_acces_alarme.get_grave_max(p_id, spv_types.c_type_liai);
        ///    END g [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Liaison_corps {
            get {
                return ResourceManager.GetString("Liaison_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE LIAISON AS
        ///
        ///    -- TODO enter package declarations (types, exceptions, methods etc) here
        ///    FUNCTION get_grave_max(p_id liai.liai_id%TYPE) RETURN NUMBER;
        ///    
        ///    FUNCTION get_coeff_from_als(p_id liai.liai_id%TYPE)
        ///    RETURN diagramme.etat_oper_t;
        ///    
        ///    PROCEDURE set_coeff_oper_ts_liai (p_equip_id EQUIP.EQUIP_ID%TYPE, 
        ///                                      p_coeff diagramme.etat_oper_t,
        ///                                      infos_diag_table IN OUT NOCOPY diagramme.i [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Liaison_decl {
            get {
                return ResourceManager.GetString("Liaison_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY LIEN_ACCES_ALARME AS
        ///  
        ///    -- TODO enter package declarations (types, exceptions, methods etc) here
        ///    FUNCTION get_grave_max(p_id NUMBER, p_type_objet spv_types.type_objet_t) 
        ///        RETURN alarme_geree.gravite_t AS
        ///        
        ///        l_grave ACCES_ACCESC_REP.ALARMGEREE_GRAVE%TYPE;
        ///        l_nom_col_id spv_types.nom_col_t;
        ///        l_requete VARCHAR2(256);
        ///    BEGIN
        ///        CASE
        ///            WHEN p_type_objet = spv_types.c_type_equip THEN
        ///                l_nom_col [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string lien_acces_alarme_corps {
            get {
                return ResourceManager.GetString("lien_acces_alarme_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE LIEN_ACCES_ALARME AS
        ///  
        ///    -- TODO enter package declarations (types, exceptions, methods etc) here
        ///    c_col_equip_id  CONSTANT spv_types.nom_col_t := &apos;EQUIP_ID&apos;;
        ///    c_col_site_id   CONSTANT spv_types.nom_col_t := &apos;SITE_ID&apos;;
        ///    c_col_liai_id   CONSTANT spv_types.nom_col_t := &apos;LIAI_ID&apos;;
        ///    
        ///    FUNCTION get_grave_max(p_id NUMBER, p_type_objet spv_types.type_objet_t) 
        ///        RETURN alarme_geree.gravite_t;
        ///
        ///END LIEN_ACCES_ALARME;
        ///.
        /// </summary>
        internal static string lien_acces_alarme_decl {
            get {
                return ResourceManager.GetString("lien_acces_alarme_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à DECLARE
        ///    nCount NUMBER;
        ///    
        ///	CURSOR CProg IS
        ///		SELECT smtdiag_id, prog_nom, prog_masque FROM prog;
        ///		
        ///BEGIN
        ///	FOR rCProg IN CProg LOOP
        ///		SELECT count(ntwdiag_id) INTO nCount 
        ///			FROM network_diag 
        ///			WHERE ntwdiag_smt_id = rCProg.smtdiag_id;
        ///		IF nCount = 0 THEN
        ///			INSERT INTO network_diag (ntwdiag_id, ntwdiag_label, ntwdiag _masque,
        ///									  ntwdiag_smt_id)
        ///				VALUES (network_diagsb.NEXTVAL, rCProg.prog_nom, rCProg.prog_masque,
        ///						rCProg.smtdiag_id);
        ///			INSERT INTO ntwdiag_rep (ntw [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string MajDiagFromProg {
            get {
                return ResourceManager.GetString("MajDiagFromProg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à DECLARE
        ///	strProgId VARCHAR2(15);
        ///	ProgId PROG.PROG_ID%TYPE;
        ///	DiagId NETWORK_DIAG.NTWDIAG_ID%TYPE;
        ///	PrConc1 ALARM3.ALARM3_PRCONC%TYPE;
        ///    PrConc2 ALARM3.ALARM3_PRCONC%TYPE;
        ///    nPos NUMBER;
        ///    
        ///    CURSOR CAlarm3 IS
        ///        SELECT * FROM alarm3;
        ///
        ///	CURSOR CProg (p_ProgId PROG.PROG_ID%TYPE) IS
        ///		SELECT smtdiag_id FROM prog WHERE prog_id = p_ProgId;
        ///		
        ///	CURSOR CDiag (p_SmtDiagId NETWORK_DIAG.NTWDIAG_SMT_ID%TYPE) IS
        ///		SELECT ntwdiag_id FROM network_diag WHERE ntwdiag_smt_id = p_SmtDiagId;
        ///
        ///BEG [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string MajTableAlarm3 {
            get {
                return ResourceManager.GetString("MajTableAlarm3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à 1;Mode opérationnel schéma: cas non encore implanté
        ///2;Type de noeud de graphe inconnu dans le calcul de l&apos;&apos;état opérationnel d&apos;&apos;un parent
        ///3;Code de type d&apos;&apos;objet inconnu
        ///4;Nature d&apos;&apos;élément non prévue dans le graphe.
        /// </summary>
        internal static string message_erreur_fr {
            get {
                return ResourceManager.GetString("message_erreur_fr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à 1;Network operationnal mode: case not yet established
        ///2;unknown network graph node type in computing operationnal state of parent
        ///3;Unknown object type code
        ///4;Unknown type element in network graph.
        /// </summary>
        internal static string message_erreur_gb {
            get {
                return ResourceManager.GetString("message_erreur_gb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY PACK_ALARME AS
        ///
        ///
        ///    --===================================================================================================
        ///    -- Mise à jour de l&apos;état opérationnel de l&apos;équipement et de ses dépendances suite
        ///    -- à l&apos;arrivée d&apos;une alarme
        ///    PROCEDURE maj_oper (Id NUMBER, SiteId NUMBER, EquipId NUMBER,
        ///                        LiaiId NUMBER, AlarmLocal NUMBER, AlarmGrave NUMBER, is_commut spv_types.is_commut_t,
        ///                        EltSiteId IN OUT NUMBER, EltSit [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string pack_alarme_corps {
            get {
                return ResourceManager.GetString("pack_alarme_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE PACK_ALARME AS
        ///    c_debordement CONSTANT VARCHAR2(11) := &apos;Debordement&apos;;
        ///    
        ///    PROCEDURE maj_oper (Id NUMBER, SiteId NUMBER, EquipId NUMBER,
        ///                        LiaiId NUMBER, AlarmLocal NUMBER, AlarmGrave NUMBER,
        ///                        is_commut spv_types.is_commut_t,
        ///                        EltSiteId IN OUT NUMBER, EltSiteNom IN OUT NOCOPY VARCHAR2, 
        ///                        EltTypeId IN OUT NUMBER, EltTypeNom IN OUT NOCOPY VARCHAR2, 
        ///                        EltId [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string pack_alarme_decl {
            get {
                return ResourceManager.GetString("pack_alarme_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY PACK_SITE AS
        ///  
        ///    --===============================================================================
        ///    -- Retourne la gravité d&apos;alarme maximum existant sur un site
        ///    FUNCTION get_grave_max(p_id site.site_id%TYPE) RETURN NUMBER IS
        ///	
        ///        l_grave ACCES_ACCESC_REP.ALARMGEREE_GRAVE%TYPE;
        ///    BEGIN
        ///        RETURN lien_acces_alarme.get_grave_max(p_id, spv_types.c_type_site);
        ///    END get_grave_max;
        ///    --============================================================= [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string pack_site_corps {
            get {
                return ResourceManager.GetString("pack_site_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE PACK_SITE AS
        ///
        ///  -- TODO enter package declarations (types, exceptions, methods etc) here
        ///  
        ///    FUNCTION get_grave_max(p_id site.site_id%TYPE) RETURN NUMBER;
        ///    
        ///    PROCEDURE set_coeff_oper (p_site_id SITE.SITE_ID%TYPE, 
        ///                              p_coeff diagramme.etat_oper_t,
        ///                              infos_diag_table IN OUT NOCOPY diagramme.infos_diag_t);
        ///                              
        ///    FUNCTION get_oper (p_site_id site.site_id%TYPE) 
        ///    RETURN diagramme [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string pack_site_decl {
            get {
                return ResourceManager.GetString("pack_site_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY parametre AS
        ///	FUNCTION get_valeur(type_param param.param_type%TYPE,
        ///						nom_param param.param_valeur%TYPE) 
        ///	RETURN VARCHAR2 IS
        ///		valeur param.param_valeur%TYPE;
        ///		pos NUMBER;	-- position du signe =
        ///		
        ///		CURSOR cur_val IS
        ///			SELECT param_valeur FROM param
        ///				WHERE param_type = type_param
        ///				AND (param_valeur like nom_param || &apos;=%&apos;
        ///                                OR param_valeur like nom_param || &apos; =%&apos;);
        ///	BEGIN
        ///		OPEN cur_val;
        ///		FETCH cur_val INTO valeur;
        ///		 [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string parametre_corps {
            get {
                return ResourceManager.GetString("parametre_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE parametre AS
        ///	c_parametres_client   CONSTANT param.PARAM_TYPE%TYPE := 9;
        ///	
        ///	-- paramètre indiquant qu&apos;il faut tenir compte des englobants/englobés
        ///	-- pour le calcul de l&apos;état opérationnel des équipements
        ///	c_str_alarm_englob	  CONSTANT VARCHAR2(12) := &apos;ALARM_ENGLOB&apos;;
        ///	-- paramètre donnant le mode de calcul pour l&apos;état opérationnel
        ///	-- équipements, schéma
        ///	c_str_mode_oper_schema CONSTANT VARCHAR2(24) := &apos;MODE_OPERATIONNEL_SCHEMA&apos;;
        ///	
        ///	FUNCTION get_valeur(type_param param.p [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string parametre_decl {
            get {
                return ResourceManager.GetString("parametre_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PROCEDURE PurgeAlarmes (iMaxJoursAl NUMBER, iMaxErr NUMBER, iMaxMail NUMBER, iMaxLog NUMBER)
        ///IS
        ///    LastDayStr	VARCHAR2 (20);	-- date et heure actuelle - MaxJoursAl au format YYYY MM DD HH24:MI:SS
        ///    LastDaySec	NUMBER;		-- idem en nombre de secondes depuis le 01/01/1998 00:00:00
        ///
        ///    IdErrMax	NUMBER;		-- Id de la donnée la plus récente
        ///    IdErrMin	NUMBER;		-- Id de la donnée la plus ancienne conservée
        ///
        ///    SSecours	BOOLEAN;	-- False si c&apos;est un serveur Normal, ou pas de réplicat [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string PurgeAlarmes {
            get {
                return ResourceManager.GetString("PurgeAlarmes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE BODY spv_mess
        ///AS
        ///    FUNCTION get_lang RETURN NUMBER IS
        ///        l_lang	lang_t;
        ///	BEGIN
        ///            SELECT USERENV(&apos;LANG&apos;) INTO l_lang FROM dual;
        ///
        ///            CASE l_lang
        ///            WHEN c_ora_francais THEN
        ///                RETURN c_lang_francais;
        ///            ELSE
        ///                RETURN c_lang_anglais;
        ///            END CASE;
        ///    END get_lang;
        ///
        ///    FUNCTION get_mess (type_mess NUMBER, code_mess NUMBER, code_lang NUMBER) RETURN VARCHAR2 IS
        ///        l_messlu	message.messa [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string spv_mess_corps {
            get {
                return ResourceManager.GetString("spv_mess_corps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE spv_mess
        ///AS
        ///    -- type pour stocker ce que retourne userenv(&apos;LANG&apos;)
        ///    SUBTYPE lang_t IS VARCHAR2(5);
        ///
        ///    -- constantes pour définir le type de message
        ///    c_type_erreur	CONSTANT message.message_type%TYPE := 0;
        ///    c_type_info		CONSTANT message.message_type%TYPE := 1;
        ///    
        ///    -- constante pour définir le n° de message Oracle lorsque
        ///    -- c&apos;est un message de type c_type_erreur
        ///    c_num_oracle	CONSTANT NUMBER := -20000;
        ///
        ///    -- constantes pour choisir la langue d [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string spv_mess_decl {
            get {
                return ResourceManager.GetString("spv_mess_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///PACKAGE spv_types AS
        ///    SUBTYPE   bool_t IS NUMBER(1);
        ///    c_false     CONSTANT bool_t := 0;
        ///    c_true      CONSTANT bool_t := 1;
        ///    c_str_true  CONSTANT VARCHAR2(4) := &apos;true&apos;;
        ///    c_str_false CONSTANT VARCHAR2(5) := &apos;false&apos;;
        ///    
        ///    SUBTYPE type_objet_t IS NUMBER(1);
        ///    c_type_equip  type_objet_t := 0;
        ///    c_type_site   type_objet_t := 1;
        ///    c_type_liai   type_objet_t := 2;
        ///    
        ///    SUBTYPE nom_col_t IS VARCHAR2(30);
        ///    
        ///    SUBTYPE is_commut_t IS bool_t;
        ///    c_comm [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string spv_types_decl {
            get {
                return ResourceManager.GetString("spv_types_decl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///TRIGGER &quot;SPVOPT&quot;.tdb_alarm BEFORE DELETE ON alarm FOR EACH ROW
        ///BEGIN
        ///
        ///  delete trapalarm where alarm_id= :old.alarm_id;
        ///
        ///	/* Si le trigger est déclenché par suite d&apos;un enregistrement créé par réplication,
        ///	   on ne fait pas le traitement */
        ///	if dbms_reputil.from_remote=TRUE then
        ///		return;
        ///	end if;
        ///
        ///END tdb_alarm;
        ///.
        /// </summary>
        internal static string tdb_alarm {
            get {
                return ResourceManager.GetString("tdb_alarm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///TRIGGER &quot;SPVOPT&quot;.tdb_finalarm before delete on FINALARM for each row
        ///
        ///declare
        ///    integrity_error  exception;
        ///    errno            integer;
        ///    errmsg           char(200);
        ///
        ///    Erreur_Trigger   EXCEPTION;		-- interblocage entre alarmes, si plusieurs EM
        ///    Erreur2_Trigger  EXCEPTION;
        ///    PRAGMA EXCEPTION_INIT (Erreur_trigger,  -6512);
        ///    PRAGMA EXCEPTION_INIT (Erreur2_trigger, -60);
        ///
        ///    i		     integer;	  -- compteur banal
        ///
        ///    TsPrOper VARCHAR2 (900); /* Chaîne donnant l&apos; [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string tdb_finalarm {
            get {
                return ResourceManager.GetString("tdb_finalarm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///TRIGGER TI_NETWORK_GRAPH
        ///    AFTER INSERT ON NETWORK_GRAPH
        ///    
        ///DECLARE
        ///    l_type      network_graph.ntwgph_type%TYPE;
        ///    l_site_id   network_graph.site_id%TYPE;
        ///    l_liai_id   network_graph.liai_id%TYPE;
        ///    l_equip_id  network_graph.equip_id%TYPE;
        ///    l_coeff     diagramme.etat_oper_t := 1;
        ///    l_parent_id network_graph.NTWGPH_PARENT_ID%TYPE;
        ///    l_diag_id   network_graph.NTWDIAG_ID%TYPE;
        ///    infos_diag_table diagramme.infos_diag_t;
        ///BEGIN
        ///    FOR ligne IN (SELECT * FROM  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string ti_network_graph {
            get {
                return ResourceManager.GetString("ti_network_graph", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///TRIGGER tib_alarm before insert on ALARM for each row
        ///declare
        ///    c_iana_nec  CONSTANT NUMBER := 119;
        ///    IsAccesId	integer;	/* ACCES_ID correspondant au n° IS et NUMAL (ou n° IP2PORT et NUMAL) */
        ///    NumBit   	NUMBER;		/* n° bit si alarme série : 1 .. */
        ///    OrigAccesId integer;	/* ACCES_ID de l&apos;objet à l&apos;origine de l&apos;alarme */
        ///    MessId	integer;	/* ID du message série correspondant à cette alarme */
        ///    ScriptId	integer;	/* Id du script à déclencher éventuellement */
        ///    Nb		in [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string tib_alarm {
            get {
                return ResourceManager.GetString("tib_alarm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE OR REPLACE
        ///TRIGGER TIB_NETWORK_GRAPH
        ///    BEFORE INSERT ON NETWORK_GRAPH FOR EACH ROW
        ///BEGIN
        ///    INSERT INTO network_graph_temp VALUES (:new.ntwgph_id);
        ///END TIB_NETWORK_GRAPH;
        ///
        ///.
        /// </summary>
        internal static string tib_network_graph {
            get {
                return ResourceManager.GetString("tib_network_graph", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///TRIGGER TIB_NTWDIAG_REP
        ///  BEFORE INSERT ON NTWDIAG_REP FOR EACH ROW 
        ///DECLARE
        ///    l_coeff diagramme.etat_oper_t;
        ///BEGIN
        ///    SELECT NVL(MIN(ntwgph_coef_oper), 1) INTO :new.ntwdrep_coef
        ///      FROM network_graph 
        ///      WHERE ntwdiag_id = :new.ntwdiag_id 
        ///      AND ntwgph_parent_id IS NULL;
        ///END;
        ///
        ///.
        /// </summary>
        internal static string tib_ntwdiag_rep {
            get {
                return ResourceManager.GetString("tib_ntwdiag_rep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///FUNCTION tib2_alarm
        ///      	(AlarmId NUMBER, AlarmDate VARCHAR2,
        ///	AlarmCl VARCHAR2, AlarmTxt NUMBER, AlarmNumal VARCHAR2, AlarmNumobj NUMBER,
        ///	AlarmComment VARCHAR2, AlarmInfo VARCHAR2, MessId IN OUT NUMBER, IsAccesId IN OUT NUMBER,
        ///	NumBit IN OUT NUMBER)
        ///RETURN BOOLEAN
        ///IS
        ///
        ///    Nb	integer;	/* nombre banal */
        ///    Id1 NUMBER;		/* sous-adresse */
        ///    Id2 NUMBER;		/* sous-adresse */
        ///    Str	varchar2 (40);  /* banal */
        ///    Str2 varchar2 (1000); /* banal */
        ////* Appelé au début de tib [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string tib2_alarm {
            get {
                return ResourceManager.GetString("tib2_alarm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///TRIGGER TIU_ALARMDATA AFTER INSERT OR UPDATE ON ALARMDATA FOR EACH ROW 
        ///	/* Appelle indirectement les fonctions ou procédures stockées suivantes :
        ///		- correl_alrm,
        ///		- IsMaskedAdm,
        ///		- IsmaskedBri,
        ///		- maj_oper,
        ///		- mess_alrm
        ///		- mess_video */
        ///declare
        ///    integrity_error  exception;
        ///    Erreur_Trigger   EXCEPTION;			-- interblocage entre alarmes, si plusieurs EM
        ///    Erreur2_Trigger  EXCEPTION;
        ///    PRAGMA EXCEPTION_INIT (Erreur_trigger,  -6512);
        ///    PRAGMA EXCEPTION_INIT (Erre [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string tiu_alarmdata {
            get {
                return ResourceManager.GetString("tiu_alarmdata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à create or replace
        ///TRIGGER tub_acces_accesc2 BEFORE UPDATE ON acces_accesc2 FOR EACH ROW
        ///
        ///DECLARE
        ///    ToDayStr	VARCHAR2 (20);	/* date et heure actuelle au format YYYY MM DD HH24:MI:SS */
        ///    ToDaySec	NUMBER;		/* idem en nombre de secondes depuis le 01/01/1998 00:00:00 */
        ///    Mess	VARCHAR2 (1800);   /* message d&apos;alarme */
        ///    OldMask	NUMBER;		/* 1 si l&apos;alarme était masquée avant le changement, 0 sinon  */
        ///    NewMask	NUMBER;		/* 1 si l&apos;alarme devient masquée après le changement, 0 sinon */
        ///
        ///    Site [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string tub_acces_accesc2 {
            get {
                return ResourceManager.GetString("tub_acces_accesc2", resourceCulture);
            }
        }
    }
}
